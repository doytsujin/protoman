// Code generated by protoc-gen-go. DO NOT EDIT.
// source: schema/src/main/proto/spotify/protoman/protodoc.proto

/*
Package registry is a generated protocol buffer package.

It is generated from these files:
	schema/src/main/proto/spotify/protoman/protodoc.proto

It has these top-level messages:
	GetSubPackagesRequest
	GetSubPackagesResponse
*/
package registry

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type GetSubPackagesRequest struct {
	PackageName string `protobuf:"bytes,1,opt,name=package_name,json=packageName" json:"package_name,omitempty"`
}

func (m *GetSubPackagesRequest) Reset()                    { *m = GetSubPackagesRequest{} }
func (m *GetSubPackagesRequest) String() string            { return proto.CompactTextString(m) }
func (*GetSubPackagesRequest) ProtoMessage()               {}
func (*GetSubPackagesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *GetSubPackagesRequest) GetPackageName() string {
	if m != nil {
		return m.PackageName
	}
	return ""
}

type GetSubPackagesResponse struct {
	SubPackageName []string `protobuf:"bytes,1,rep,name=sub_package_name,json=subPackageName" json:"sub_package_name,omitempty"`
}

func (m *GetSubPackagesResponse) Reset()                    { *m = GetSubPackagesResponse{} }
func (m *GetSubPackagesResponse) String() string            { return proto.CompactTextString(m) }
func (*GetSubPackagesResponse) ProtoMessage()               {}
func (*GetSubPackagesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *GetSubPackagesResponse) GetSubPackageName() []string {
	if m != nil {
		return m.SubPackageName
	}
	return nil
}

func init() {
	proto.RegisterType((*GetSubPackagesRequest)(nil), "spotify.protoman.GetSubPackagesRequest")
	proto.RegisterType((*GetSubPackagesResponse)(nil), "spotify.protoman.GetSubPackagesResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for SchemaProtodoc service

type SchemaProtodocClient interface {
	GetSubPackages(ctx context.Context, in *GetSubPackagesRequest, opts ...grpc.CallOption) (*GetSubPackagesResponse, error)
}

type schemaProtodocClient struct {
	cc *grpc.ClientConn
}

func NewSchemaProtodocClient(cc *grpc.ClientConn) SchemaProtodocClient {
	return &schemaProtodocClient{cc}
}

func (c *schemaProtodocClient) GetSubPackages(ctx context.Context, in *GetSubPackagesRequest, opts ...grpc.CallOption) (*GetSubPackagesResponse, error) {
	out := new(GetSubPackagesResponse)
	err := grpc.Invoke(ctx, "/spotify.protoman.SchemaProtodoc/GetSubPackages", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for SchemaProtodoc service

type SchemaProtodocServer interface {
	GetSubPackages(context.Context, *GetSubPackagesRequest) (*GetSubPackagesResponse, error)
}

func RegisterSchemaProtodocServer(s *grpc.Server, srv SchemaProtodocServer) {
	s.RegisterService(&_SchemaProtodoc_serviceDesc, srv)
}

func _SchemaProtodoc_GetSubPackages_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetSubPackagesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SchemaProtodocServer).GetSubPackages(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/spotify.protoman.SchemaProtodoc/GetSubPackages",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SchemaProtodocServer).GetSubPackages(ctx, req.(*GetSubPackagesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SchemaProtodoc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "spotify.protoman.SchemaProtodoc",
	HandlerType: (*SchemaProtodocServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSubPackages",
			Handler:    _SchemaProtodoc_GetSubPackages_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "schema/src/main/proto/spotify/protoman/protodoc.proto",
}

func init() {
	proto.RegisterFile("schema/src/main/proto/spotify/protoman/protodoc.proto", fileDescriptor0)
}

var fileDescriptor0 = []byte{
	// 265 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x8f, 0xb1, 0x4a, 0xc4, 0x40,
	0x10, 0x86, 0x89, 0x82, 0x78, 0xab, 0xc4, 0x23, 0x9c, 0x22, 0xc1, 0x42, 0xd3, 0x18, 0x2c, 0xb2,
	0xa8, 0xd8, 0x5c, 0x79, 0x8d, 0x9d, 0x84, 0x5c, 0x67, 0x73, 0x4c, 0xe2, 0x18, 0x17, 0xdd, 0x9d,
	0x35, 0xb3, 0x11, 0xae, 0x12, 0x7c, 0x03, 0xf1, 0xd1, 0x7c, 0x05, 0x1f, 0x44, 0x4c, 0x56, 0xc1,
	0x28, 0x5c, 0xb7, 0xfb, 0xf3, 0xcd, 0xc7, 0xff, 0x8b, 0x0b, 0xae, 0xee, 0x50, 0x83, 0xe4, 0xa6,
	0x92, 0x1a, 0x94, 0x91, 0xb6, 0x21, 0x47, 0x92, 0x2d, 0x39, 0x75, 0xbb, 0xec, 0x7f, 0x1a, 0x7c,
	0x7c, 0x43, 0x55, 0xd6, 0x3d, 0xa2, 0xb1, 0x07, 0xb2, 0x6f, 0x20, 0x3e, 0xa8, 0x89, 0xea, 0x07,
	0x94, 0x60, 0x95, 0x04, 0x63, 0xc8, 0x81, 0x53, 0x64, 0xb8, 0x07, 0x92, 0xa9, 0xd8, 0xbd, 0x44,
	0x37, 0x6f, 0xcb, 0x1c, 0xaa, 0x7b, 0xa8, 0x91, 0x0b, 0x7c, 0x6c, 0x91, 0x5d, 0x74, 0x24, 0xb6,
	0x6d, 0x1f, 0x2d, 0x0c, 0x68, 0xdc, 0x0f, 0x0e, 0x83, 0x74, 0x54, 0x6c, 0xf9, 0xec, 0x0a, 0x34,
	0x26, 0x33, 0xb1, 0x37, 0xbc, 0x65, 0x4b, 0x86, 0x31, 0x4a, 0xc5, 0x98, 0xdb, 0x72, 0x31, 0x10,
	0xac, 0xa7, 0xa3, 0x22, 0xe4, 0x1f, 0xfc, 0xcb, 0x71, 0xf6, 0x1a, 0x88, 0x70, 0xde, 0x2d, 0xcd,
	0xfd, 0x90, 0xe8, 0x59, 0x84, 0xbf, 0xb5, 0xd1, 0x71, 0x36, 0x5c, 0x95, 0xfd, 0x5b, 0x3a, 0x4e,
	0x57, 0x83, 0x7d, 0xc3, 0x24, 0x7e, 0x79, 0xff, 0x78, 0x5b, 0x9b, 0x24, 0x3b, 0xf2, 0xe9, 0x54,
	0x72, 0x5b, 0xfa, 0xaa, 0x3c, 0x0d, 0x4e, 0x66, 0x89, 0x98, 0x54, 0xa4, 0xff, 0xa8, 0xf2, 0xe0,
	0x7a, 0xb3, 0xc1, 0x5a, 0xb1, 0x6b, 0x96, 0xe5, 0x46, 0x97, 0x9e, 0x7f, 0x06, 0x00, 0x00, 0xff,
	0xff, 0x46, 0x2e, 0x34, 0x59, 0xa7, 0x01, 0x00, 0x00,
}
